// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  // enabling the preview Omit feature
  previewFeatures = ["omitApi"]
  output          = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  name      String    @unique
  image     String?
  address   String
  address2  String?
  address3  String?
  address4  String?
  city      String
  zip       String    @db.VarChar(10)
  country   String    @db.VarChar(2)
  hours     String
  phone     String?
  email     String?
  website   String?
  menus     Menu[]
}

model Menu {
  id                    Int           @id @default(autoincrement())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  deletedAt             DateTime?
  name                  String        @unique
  price                 Int
  description           String
  image                 String?
  labelId               Int
  label                 Label         @relation(fields: [labelId], references: [id])
  allergenics           Allergenics[]
  restaurantId          Int
  dateAvailable         DateTime      @default(now())
  tags                  String[]
  daysAvailableFromDate Int           @default(1)
  favorites             Favorite[]
  likes                 Like[]
  restaurant            Restaurant    @relation(fields: [restaurantId], references: [id])
}

model Like {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    Int
  menuId    Int
  menu      Menu      @relation(fields: [menuId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Favorite {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    Int
  menuId    Int
  menu      Menu      @relation(fields: [menuId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  email     String     @unique
  name      String
  favorites Favorite[]
  likes     Like[]
}

model Label {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  name      String    @unique
  menus     Menu[]
}

model Allergenics {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  name      String    @unique
  menus     Menu[]
}
